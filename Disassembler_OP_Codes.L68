00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/4/2021 1:28:21 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  
00000000                             9  
00000000                            10  ; D4 Contains Original hex code
00000000                            11  ; D3 Contains modified hex code
00000000                            12  
00000000                            13  ; D1 is used to bit shift
00000000                            14  
00000000                            15  JUMP_OP_CODE:       ; D4 = XXXX YYYY YYYY YYYY
00000000                            16          
00000000  4283                      17          CLR.L       D3
00000002  2604                      18          MOVE.L      D4, D3
00000004  4281                      19          CLR.L       D1
00000006  4282                      20          CLR.L       D2
00000008  123C 000C                 21          MOVE.B      #12, D1
0000000C  E26B                      22          LSR.W       D1, D3  ; D3 = 0000 0000 0000 XXXX
0000000E                            23  
0000000E  6000 0004                 24          BRA         JUMP_1
00000012                            25          
00000012                            26          
00000012                            27  JUMP_0:
00000012                            28  
00000012  4E75                      29          RTS 
00000014                            30          
00000014                            31          
00000014                            32  JUMP_1:
00000014  B63C 0001                 33          CMP.B       #$1, D3 ;First 4 bits:  0001
00000018  6600 0010                 34          BNE         JUMP_2
0000001C  4EB9 00000094             35          JSR         OP_CODE_BASE_MOVE
Line 36 ERROR: Undefined symbol
00000022  4EB9 004DBD16             36          JSR         EA_MOVE 
00000028  4E75                      37          RTS
0000002A                            38  
0000002A                            39  
0000002A                            40  JUMP_2:             ; MOVE.L or MOVEA.L
0000002A  B63C 0002                 41          CMP.B       #$2, D3 ;First 4 bits:  0010
0000002E  6600 0020                 42          BNE         JUMP_3
00000032  4EB9 00000086             43          JSR         ISOLATE_DESTM
00000038  B63C 0001                 44          CMP.B       #$1, D3 
0000003C  6700 0070                 45          BEQ         J_MOVEA_L
00000040  B63C 0002                 46          CMP.B       #$2, D3 
00000044  6700 0082                 47          BEQ         J_MOVE_L
Line 48 ERROR: Undefined symbol
00000048  4EB9 004DBD16             48          JSR         EA_MOVE 
0000004E  4E75                      49          RTS
00000050                            50          
00000050                            51  
00000050                            52  JUMP_3:             ; MOVE.W or MOVEA.W
00000050  B63C 0003                 53          CMP.B       #$3, D3  ;First 4 bits:  0011
00000054                            54          ; BNE         JUMP_4
00000054  4EB9 00000086             55          JSR         ISOLATE_DESTM
0000005A  B63C 0001                 56          CMP.B       #$1, D3 
0000005E  6700 0082                 57          BEQ         J_MOVEA_W
00000062  B63C 0002                 58          CMP.B       #$2, D3
00000066  6700 0094                 59          BEQ         J_MOVE_W
0000006A                            60          
Line 61 ERROR: Undefined symbol
0000006A  4EB9 004DBD16             61          JSR         EA_MOVE
00000070                            62          
00000070  4E75                      63          RTS
00000072                            64  
00000072                            65  
00000072                            66  JUMP_4:
00000072                            67  
00000072  4E75                      68          RTS 
00000074                            69  
00000074                            70  
00000074                            71  
00000074                            72  JUMP_5:
00000074  B63C 0005                 73          CMP.B       #$5, D3
00000078  6000 009E                 74          BRA         OP_CODE_ADDQ
0000007C  4E75                      75          RTS 
0000007E                            76          
0000007E                            77  JUMP_6:
0000007E                            78  
0000007E  4E75                      79          RTS 
00000080                            80  
00000080                            81          
00000080                            82  ;.
00000080                            83  ;.
00000080                            84  ;.
00000080                            85  ;.
00000080                            86  ;.
00000080                            87  ;.
00000080                            88  ;.
00000080                            89   
00000080                            90  JUMP_E:
00000080                            91  
00000080  4E75                      92          RTS 
00000082                            93           
00000082                            94          
00000082                            95          
00000082                            96  
00000082                            97          
00000082                            98          ;LEA         ERROR_MSG, A1
00000082                            99          ;MOVE.B      #14, D0    
00000082                           100          ;TRAP        #15
Line 101 ERROR: Undefined symbol
00000082  6000 BC92                101          BRA         DONE
00000086                           102  
00000086                           103  
00000086                           104  
00000086                           105  
00000086                           106          ;  Move valid sizes: 00, 11 10
00000086                           107          ;  MoveA valid sizes: 11, 10
00000086                           108          ; Code = 103C
00000086                           109  
00000086                           110  
00000086                           111  
00000086                           112  
00000086                           113  ; Functions to help isolate bits
00000086                           114  ; 0000 000X XX00 0000
00000086                           115  ; MOVE = 0011/0010 XXXY YYXX XXXX
00000086                           116  ; MOVEA = 0011/0010 XXX0 01XX XXXX
00000086                           117  ISOLATE_DESTM:
00000086  4283                     118          CLR.L       D3          
00000088  3604                     119          MOVE.W      D4,D3 ; D3 = YYYY YYYX XXYY YYYY
0000008A  EF4B                     120          LSL.W       #7,D3 ; Shift left 7 bits to 0 out those values  D3 = XXXY YYYY Y000 0000 
0000008C  123C 000D                121          MOVE.B      #13,D1
00000090  E26B                     122          LSR.W       D1,D3 ; Shift right 13. 7 to compensate for previous shift and another 6 on top; XXXY YYYY Y000 0000  => 0000 0000 0000 0XXX
00000092  4E75                     123          RTS 
00000094                           124  
00000094                           125  
00000094                           126  
00000094                           127  
00000094                           128          
00000094                           129          
00000094                           130          
00000094                           131  ; MOVE/MOVEA BLOCK ----------------------------------
00000094                           132  OP_CODE_BASE_MOVE:
00000094                           133          ; This should only execute for Move.B
00000094  43F9 0000012D            134          LEA         MOVE_MSG, A1
0000009A  103C 000E                135          MOVE.B      #14, D0
0000009E  4E4F                     136          TRAP        #15
000000A0  43F9 00000138            137          LEA         BYTE_MSG, A1
000000A6  103C 000E                138          MOVE.B      #14, D0
000000AA  4E4F                     139          TRAP        #15
000000AC  4E75                     140          RTS         
000000AE                           141  
000000AE                           142  
000000AE                           143  ; first 4 bits = 0010 BLOCK --------------------    
000000AE                           144  J_MOVEA_L:
000000AE  43F9 00000132            145      LEA         MOVEA_MSG, A1
000000B4  103C 000E                146      MOVE.B      #14, D0
000000B8  4E4F                     147      TRAP        #15
000000BA  43F9 0000013E            148      LEA         LONG_MSG, A1
000000C0  103C 000E                149      MOVE.B      #14, D0
000000C4  4E4F                     150      TRAP        #15
000000C6  4E75                     151      RTS    
000000C8                           152  J_MOVE_L:
000000C8  43F9 0000012D            153      LEA         MOVE_MSG, A1
000000CE  103C 000E                154      MOVE.B      #14, D0
000000D2  4E4F                     155      TRAP        #15
000000D4  43F9 0000013E            156      LEA         LONG_MSG, A1
000000DA  103C 000E                157      MOVE.B      #14, D0
000000DE  4E4F                     158      TRAP        #15
000000E0  4E75                     159      RTS
000000E2                           160  ; /BLOCK --------------------
000000E2                           161  
000000E2                           162  ; first 4 bits = 0011 BLOCK --------------------   
000000E2                           163  
000000E2                           164  J_MOVEA_W:
000000E2  43F9 00000132            165      LEA         MOVEA_MSG, A1
000000E8  103C 000E                166      MOVE.B      #14, D0
000000EC  4E4F                     167      TRAP        #15
000000EE  43F9 0000013B            168      LEA         WORD_MSG, A1
000000F4  103C 000E                169      MOVE.B      #14, D0
000000F8  4E4F                     170      TRAP        #15
000000FA  4E75                     171      RTS  
000000FC                           172      
000000FC                           173  J_MOVE_W:
000000FC  43F9 0000012D            174      LEA         MOVE_MSG, A1
00000102  103C 000E                175      MOVE.B      #14, D0
00000106  4E4F                     176      TRAP        #15
00000108  43F9 0000013B            177      LEA         WORD_MSG, A1
0000010E  103C 000E                178      MOVE.B      #14, D0
00000112  4E4F                     179      TRAP        #15
00000114  4E75                     180      RTS  
00000116  4E75                     181      RTS
00000118                           182      
00000118                           183  ; /BLOCK --------------------
00000118                           184  
00000118                           185  
00000118                           186  ; END MOVE BLOCK ------------------------------
00000118                           187  
00000118                           188          
00000118                           189  OP_CODE_ADDQ:
00000118                           190  
00000118  43F9 00000128            191          LEA         ADDQ_MSG, A1
0000011E  103C 000E                192          MOVE.B      #14, D0
00000122  4E4F                     193          TRAP        #15
Line 194 ERROR: Undefined symbol
00000124  6000 BBF0                194          BRA         DONE
00000128                           195  
00000128                           196  
00000128= 41 44 44 51 00           197  ADDQ_MSG:       DC.B        'ADDQ',0
0000012D= 4D 4F 56 45 00           198  MOVE_MSG:       DC.B        'MOVE',0
00000132= 4D 4F 56 45 41 00        199  MOVEA_MSG:       DC.B        'MOVEA',0
00000138                           200  
00000138                           201  ; Size messages
00000138                           202  
00000138= 2E 42 00                 203  BYTE_MSG:       DC.B        '.B',0
0000013B= 2E 57 00                 204  WORD_MSG:       DC.B        '.W',0
0000013E= 2E 4C 00                 205  LONG_MSG:       DC.B        '.L',0
00000141                           206  
00000141                           207  
00000141                           208  
00000141                           209  
00000141                           210  
00000141                           211  
00000141                           212  
00000141                           213  
00000141                           214  
00000141                           215  
00000141                           216  
00000141                           217  
00000141                           218  
Line 219 WARNING: END directive missing, starting address not set

5 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_MSG            128
BYTE_MSG            138
ISOLATE_DESTM       86
JUMP_0              12
JUMP_1              14
JUMP_2              2A
JUMP_3              50
JUMP_4              72
JUMP_5              74
JUMP_6              7E
JUMP_E              80
JUMP_OP_CODE        0
J_MOVEA_L           AE
J_MOVEA_W           E2
J_MOVE_L            C8
J_MOVE_W            FC
LONG_MSG            13E
MOVEA_MSG           132
MOVE_MSG            12D
OP_CODE_ADDQ        118
OP_CODE_BASE_MOVE   94
WORD_MSG            13B
