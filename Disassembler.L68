00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 2/18/2021 3:43:48 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8      ; Testing MOVE.B
00001000                             9      ; MOVE.B = 10 3C =  0001 0000 0011 1100
00001000                            10      ; Byte Operation   00(01) 0000 0011 1100
00001000                            11      ; Destination      0001 (0000 00)11 1100
00001000                            12      ; Source           0001 0000 00(11 1100)
00001000                            13      
00001000                            14      ; 1 byte is represented by 2 hex digits
00001000                            15      
00001000                            16      
00001000                            17      ; can determine OP code from first 4 bits
00001000                            18      
00001000                            19  START:                  ; first instruction of program
00001000  43F9 000010AC             20          LEA         START_MSG, A1
00001006  103C 000E                 21          MOVE.B      #14, D0    
0000100A  4E4F                      22          TRAP        #15
0000100C                            23          
0000100C  43F9 000010F2             24          LEA         STA_ADDR, A1
00001012  103C 0002                 25          MOVE.B      #2, D0
00001016  4E4F                      26          TRAP        #15             ; D1 has the length of the address
00001018                            27          
00001018                            28          
00001018  6000 0002                 29          BRA         CONVERT_TO_ASCII
0000101C                            30          
0000101C                            31          
0000101C                            32          ; LEA         END_MSG, A1
0000101C                            33          ; MOVE.B      #14, D0    
0000101C                            34          ; TRAP        #15
0000101C                            35          
0000101C                            36          ; LEA         END_ADDR, A1
0000101C                            37          ; MOVE.B      #2, D0
0000101C                            38          ; TRAP        #15
0000101C                            39          
0000101C                            40  
0000101C                            41  
0000101C                            42  
0000101C                            43  
0000101C                            44  CONVERT_TO_ASCII:
0000101C                            45  
0000101C  0C01 0000                 46          CMPI.B      #$0, D1     ; check if we have traversed the whole length
00001020  6700 003E                 47          BEQ         OP_CODE
00001024                            48      
00001024  1419                      49          MOVE.B      (A1)+, D2   ; Gives D2 the next Byte from A1
00001026                            50      
00001026  163C 0039                 51          MOVE.B      #$39, D3    ; Moves 39 into D3, Ascii Characters after 39 are not letters
0000102A  B403                      52          CMP.B       D3, D2
0000102C                            53  
0000102C  6F00 0006                 54          BLE         NUM_ASCII   ; data in D2 is less than 39, Most likely a number
00001030  6000 0018                 55          BRA         LET_ASCII   ; If not a number, then it is an ASCII Letter
00001034                            56  
00001034                            57  
00001034                            58  NUM_ASCII:
00001034  5301                      59          SUBI.B      #$1, D1
00001036                            60          
00001036  163C 0030                 61          MOVE.B      #$30, D3
0000103A  9403                      62          SUB.B       D3, D2      ; ASCII numbers start at 30. 30 = 0, 31 = 1, etc
0000103C  D802                      63          ADD.B       D2, D4      ; new ASCII number stored at D4
0000103E                            64          
0000103E  0C01 0000                 65          CMPI.B      #$0, D1     ; check if we have traversed the whole length
00001042  6700 001C                 66          BEQ         OP_CODE
00001046                            67          
00001046                            68          
00001046  E984                      69          ASL.L       #4, D4
00001048                            70        
00001048  60D2                      71          BRA         CONVERT_TO_ASCII
0000104A                            72          
0000104A                            73          
0000104A                            74  LET_ASCII:
0000104A  5301                      75          SUBI.B      #$1, D1
0000104C                            76                 
0000104C                            77  
0000104C  163C 0037                 78          MOVE.B      #$37, D3
00001050  9403                      79          SUB.B       D3, D2      ; Hex letters we care about are from A-F, we can use math do achieve this
00001052  D802                      80          ADD.B       D2, D4      ; 41 is used to represent A in Hex. Hexadecimal subtraction: 41 - 37 = A
00001054                            81                                  ; 46 is used to represent F in Hex. 46 - 37 = F
00001054                            82          
00001054  0C01 0000                 83          CMPI.B      #$0, D1     ; check if we have traversed the whole length
00001058  6700 0006                 84          BEQ         OP_CODE
0000105C                            85          
0000105C  E984                      86          ASL.L       #4, D4
0000105E                            87          
0000105E                            88          
0000105E  60BC                      89          BRA         CONVERT_TO_ASCII
00001060                            90  
00001060                            91  
00001060                            92  
00001060                            93  
00001060                            94  
00001060                            95  OP_CODE:
00001060  2644                      96          MOVEA.L     D4, A3
00001062  4281                      97          CLR.L       D1
00001064  123C 000C                 98          MOVE.B      #12, D1
00001068  E26C                      99          LSR.W       D1, D4
0000106A                           100  
0000106A                           101          
0000106A                           102          
0000106A                           103          
0000106A                           104          
0000106A                           105          ; List of compare and BRA statements
0000106A                           106  
0000106A                           107          
0000106A  B83C 0001                108          CMP.B       #$1, D4
0000106E  6000 000E                109          BRA         OP_CODE_MOVE
00001072                           110          
00001072  43F9 000010DF            111          LEA         ERROR_MSG, A1
00001078  103C 000E                112          MOVE.B      #14, D0    
0000107C  4E4F                     113          TRAP        #15
0000107E                           114  
0000107E                           115  
0000107E                           116  
0000107E                           117  OP_CODE_MOVE:
0000107E                           118  
0000107E  43F9 000010E5            119          LEA         SUCCESS_MSG, A1
00001084  103C 000E                120          MOVE.B      #14, D0    
00001088  4E4F                     121          TRAP        #15
0000108A                           122  
0000108A  43F9 000010ED            123          LEA         MOVE_MSG, A1
00001090  103C 000E                124          MOVE.B      #14, D0    
00001094  4E4F                     125          TRAP        #15
00001096                           126  
00001096                           127  
00001096                           128  
00001096                           129          
00001096                           130  * Put program code here
00001096                           131  
00001096                           132  
00001096                           133  DONE:
00001096                           134  
00001096                           135          
00001096  103C 0009                136          MOVE.B  #9, D0
0000109A  4E4F                     137          TRAP    #15
0000109C                           138          
0000109C                           139          
0000109C                           140          
0000109C                           141  * Put variables and constants here
0000109C                           142          INCLUDE     'Disassembler_EA_Codes.x68'
0000109C                           143  
0000109C                           144  
0000109C                           145  
0000109C                           146  EACODE:
0000109C= 54 45 53 54 4C 4F ...    147          DC.B    'TESTLOC',0
000010A4                           148  
000010A4                           149  
000010A4                           150  
000010A4                           151  
000010A4                           152  
000010A4                           153  -------------------- end include --------------------
000010A4                           154          INCLUDE     'Disassembler_OP_Codes.x68'
000010A4                           155  
000010A4                           156  OPCODE:
000010A4= 54 45 53 54 4C 4F ...    157          DC.B    'TESTLOC',0
000010AC                           158  
000010AC                           159  
000010AC                           160  
000010AC                           161  
000010AC                           162  -------------------- end include --------------------
000010AC                           163  
000010AC                           164  
000010AC                           165  
000010AC                           166  
000010AC                           167  START_MSG:
000010AC= 45 6E 74 65 72 20 ...    168                  DC.B        'Enter a starting address:',0
000010C6                           169  END_MSG:
000010C6= 45 6E 74 65 72 20 ...    170                  DC.B        'Enter an ending address:',0
000010DF                           171                  
000010DF                           172  ERROR_MSG:
000010DF= 45 72 72 6F 72 00        173                  DC.B        'Error',0
000010E5                           174  SUCCESS_MSG:    
000010E5= 53 75 63 63 65 73 ...    175                  DC.B        'Success',0
000010ED                           176                  
000010ED                           177  MOVE_MSG:
000010ED= 4D 4F 56 45 00           178                  DC.B        'MOVE',0
000010F2                           179                  
000010F2                           180                  
000010F2                           181  STA_ADDR        DS.B        40
0000111A                           182  END_ADDR        DS.B        40
00001142                           183                  
00001142                           184                  
00001142                           185          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CONVERT_TO_ASCII    101C
DONE                1096
EACODE              109C
END_ADDR            111A
END_MSG             10C6
ERROR_MSG           10DF
LET_ASCII           104A
MOVE_MSG            10ED
NUM_ASCII           1034
OPCODE              10A4
OP_CODE             1060
OP_CODE_MOVE        107E
START               1000
START_MSG           10AC
STA_ADDR            10F2
SUCCESS_MSG         10E5
