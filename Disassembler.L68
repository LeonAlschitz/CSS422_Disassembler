00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 2/18/2021 4:14:26 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8      ; Testing MOVE.B
00001000                             9      ; MOVE.B = 10 3C =  0001 0000 0011 1100
00001000                            10      ; Byte Operation   00(01) 0000 0011 1100
00001000                            11      ; Destination      0001 (0000 00)11 1100
00001000                            12      ; Source           0001 0000 00(11 1100)
00001000                            13      
00001000                            14      ; 1 byte is represented by 2 hex digits
00001000                            15      
00001000                            16      
00001000                            17      ; can determine OP code from first 4 bits
00001000                            18      
00001000                            19  START:                  ; first instruction of program
00001000  43F9 000010C0             20          LEA         START_MSG, A1
00001006  103C 000E                 21          MOVE.B      #14, D0    
0000100A  4E4F                      22          TRAP        #15
0000100C                            23          
0000100C  43F9 0000110B             24          LEA         STA_ADDR, A1
00001012  103C 0002                 25          MOVE.B      #2, D0
00001016  4E4F                      26          TRAP        #15             ; D1 has the length of the address
00001018                            27          
00001018                            28          
00001018                            29          
00001018  6000 0002                 30          BRA         CONVERT_TO_ASCII
0000101C                            31          
0000101C                            32          
0000101C                            33          ; LEA         END_MSG, A1
0000101C                            34          ; MOVE.B      #14, D0    
0000101C                            35          ; TRAP        #15
0000101C                            36          
0000101C                            37          ; LEA         END_ADDR, A1
0000101C                            38          ; MOVE.B      #2, D0
0000101C                            39          ; TRAP        #15
0000101C                            40          
0000101C                            41  
0000101C                            42  
0000101C                            43  
0000101C                            44  
0000101C                            45  CONVERT_TO_ASCII:
0000101C                            46  
0000101C  0C01 0000                 47          CMPI.B      #$0, D1     ; check if we have traversed the whole length
00001020  6700 003E                 48          BEQ         OP_CODE
00001024                            49      
00001024  1419                      50          MOVE.B      (A1)+, D2   ; Gives D2 the next Byte from A1
00001026                            51      
00001026  163C 0039                 52          MOVE.B      #$39, D3    ; Moves 39 into D3, Ascii Characters after 39 are not letters
0000102A  B403                      53          CMP.B       D3, D2
0000102C                            54  
0000102C  6F00 0006                 55          BLE         NUM_ASCII   ; data in D2 is less than 39, Most likely a number
00001030  6000 0018                 56          BRA         LET_ASCII   ; If not a number, then it is an ASCII Letter
00001034                            57  
00001034                            58  
00001034                            59  NUM_ASCII:
00001034  5301                      60          SUBI.B      #$1, D1
00001036                            61          
00001036  163C 0030                 62          MOVE.B      #$30, D3
0000103A  9403                      63          SUB.B       D3, D2      ; ASCII numbers start at 30. 30 = 0, 31 = 1, etc
0000103C  D802                      64          ADD.B       D2, D4      ; new ASCII number stored at D4
0000103E                            65          
0000103E  0C01 0000                 66          CMPI.B      #$0, D1     ; check if we have traversed the whole length
00001042  6700 001C                 67          BEQ         OP_CODE
00001046                            68          
00001046                            69          
00001046  E984                      70          ASL.L       #4, D4
00001048                            71        
00001048  60D2                      72          BRA         CONVERT_TO_ASCII
0000104A                            73          
0000104A                            74          
0000104A                            75  LET_ASCII:
0000104A  5301                      76          SUBI.B      #$1, D1
0000104C                            77                 
0000104C                            78  
0000104C  163C 0037                 79          MOVE.B      #$37, D3
00001050  9403                      80          SUB.B       D3, D2      ; Hex letters we care about are from A-F, we can use math do achieve this
00001052  D802                      81          ADD.B       D2, D4      ; 41 is used to represent A in Hex. Hexadecimal subtraction: 41 - 37 = A
00001054                            82                                  ; 46 is used to represent F in Hex. 46 - 37 = F
00001054                            83          
00001054  0C01 0000                 84          CMPI.B      #$0, D1     ; check if we have traversed the whole length
00001058  6700 0006                 85          BEQ         OP_CODE
0000105C                            86          
0000105C  E984                      87          ASL.L       #4, D4
0000105E                            88          
0000105E                            89          
0000105E  60BC                      90          BRA         CONVERT_TO_ASCII
00001060                            91  
00001060                            92  
00001060                            93  
00001060                            94  
00001060                            95  
00001060                            96  OP_CODE:
00001060  2644                      97          MOVEA.L     D4, A3
00001062  4281                      98          CLR.L       D1
00001064  123C 000C                 99          MOVE.B      #12, D1
00001068  E26C                     100          LSR.W       D1, D4
0000106A                           101  
0000106A                           102          
0000106A                           103          
0000106A                           104          
0000106A                           105          
0000106A                           106          ; List of compare and BRA statements
0000106A                           107  
0000106A                           108          
0000106A  B83C 0001                109          CMP.B       #$1, D4
0000106E  6000 001A                110          BRA         OP_CODE_MOVE
00001072                           111          
00001072  B83C 0005                112          CMP.B       #$5, D4
00001076  6000 0022                113          BRA         OP_CODE_ADDQ
0000107A                           114          
0000107A  43F9 000010F3            115          LEA         ERROR_MSG, A1
00001080  103C 000E                116          MOVE.B      #14, D0    
00001084  4E4F                     117          TRAP        #15
00001086  6000 0022                118          BRA         DONE
0000108A                           119  
0000108A                           120  
0000108A                           121  OP_CODE_MOVE:
0000108A  43F9 00001106            122          LEA         MOVE_MSG, A1
00001090  103C 000E                123          MOVE.B      #14, D0
00001094  4E4F                     124          TRAP        #15
00001096  6000 0012                125          BRA         DONE
0000109A                           126  
0000109A                           127          
0000109A                           128  OP_CODE_ADDQ:
0000109A  43F9 00001101            129          LEA         ADDQ_MSG, A1
000010A0  103C 000E                130          MOVE.B      #14, D0
000010A4  4E4F                     131          TRAP        #15
000010A6  6000 0002                132          BRA         DONE
000010AA                           133  
000010AA                           134  
000010AA                           135          
000010AA                           136  * Put program code here
000010AA                           137  
000010AA                           138  
000010AA                           139  DONE:
000010AA                           140  
000010AA                           141          
000010AA  103C 0009                142          MOVE.B  #9, D0
000010AE  4E4F                     143          TRAP    #15
000010B0                           144          
000010B0                           145          
000010B0                           146          
000010B0                           147  * Put variables and constants here
000010B0                           148          INCLUDE     'Disassembler_EA_Codes.x68'
000010B0                           149  
000010B0                           150  
000010B0                           151  
000010B0                           152  EACODE:
000010B0= 54 45 53 54 4C 4F ...    153          DC.B    'TESTLOC',0
000010B8                           154  
000010B8                           155  
000010B8                           156  
000010B8                           157  
000010B8                           158  
000010B8                           159  -------------------- end include --------------------
000010B8                           160          INCLUDE     'Disassembler_OP_Codes.x68'
000010B8                           161  
000010B8                           162  OPCODE:
000010B8= 54 45 53 54 4C 4F ...    163          DC.B    'TESTLOC',0
000010C0                           164  
000010C0                           165  
000010C0                           166  
000010C0                           167  
000010C0                           168  -------------------- end include --------------------
000010C0                           169  
000010C0                           170  
000010C0                           171  
000010C0                           172  
000010C0                           173  START_MSG:
000010C0= 45 6E 74 65 72 20 ...    174                  DC.B        'Enter a starting address:',0
000010DA                           175  END_MSG:
000010DA= 45 6E 74 65 72 20 ...    176                  DC.B        'Enter an ending address:',0
000010F3                           177                  
000010F3                           178  ERROR_MSG:
000010F3= 45 72 72 6F 72 00        179                  DC.B        'Error',0
000010F9                           180                  
000010F9= 53 75 63 63 65 73 ...    181  SUCCESS_MSG:    DC.B        'Success',0
00001101                           182  
00001101= 41 44 44 51 00           183  ADDQ_MSG:       DC.B        'ADDQ',0
00001106= 4D 4F 56 45 00           184  MOVE_MSG:       DC.B        'MOVE',0
0000110B                           185                  
0000110B                           186                  
0000110B                           187                  
0000110B                           188  STA_ADDR        DS.B        40
00001133                           189  END_ADDR        DS.B        40
0000115B                           190                  
0000115B                           191                  
0000115B                           192          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_MSG            1101
CONVERT_TO_ASCII    101C
DONE                10AA
EACODE              10B0
END_ADDR            1133
END_MSG             10DA
ERROR_MSG           10F3
LET_ASCII           104A
MOVE_MSG            1106
NUM_ASCII           1034
OPCODE              10B8
OP_CODE             1060
OP_CODE_ADDQ        109A
OP_CODE_MOVE        108A
START               1000
START_MSG           10C0
STA_ADDR            110B
SUCCESS_MSG         10F9
