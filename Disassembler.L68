00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 2/23/2021 2:35:12 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8      ; Testing MOVE.B
00001000                             9      ; MOVE.B = 10 3C =  0001 0000 0011 1100
00001000                            10      ; Byte Operation   00(01) 0000 0011 1100
00001000                            11      ; Destination      0001 (0000 00)11 1100
00001000                            12      ; Source           0001 0000 00(11 1100)
00001000                            13      
00001000                            14      ; 1 byte is represented by 2 hex digits
00001000                            15      
00001000                            16      
00001000                            17      ; can determine OP code from first 4 bits
00001000                            18      
00001000                            19  START:                  ; first instruction of program
00001000  43F9 000010BC             20          LEA         START_MSG, A1
00001006  103C 000E                 21          MOVE.B      #14, D0    
0000100A  4E4F                      22          TRAP        #15
0000100C                            23          
0000100C  43F9 000010FD             24          LEA         STA_ADDR, A1
00001012  103C 0002                 25          MOVE.B      #2, D0
00001016  4E4F                      26          TRAP        #15             ; D1 has the length of the address
00001018                            27          
00001018                            28          
00001018                            29          
00001018  6000 0002                 30          BRA         CONVERT_TO_ASCII
0000101C                            31          
0000101C                            32          
0000101C                            33          ; LEA         END_MSG, A1
0000101C                            34          ; MOVE.B      #14, D0    
0000101C                            35          ; TRAP        #15
0000101C                            36          
0000101C                            37          ; LEA         END_ADDR, A1
0000101C                            38          ; MOVE.B      #2, D0
0000101C                            39          ; TRAP        #15
0000101C                            40          
0000101C                            41  
0000101C                            42  
0000101C                            43  
0000101C                            44  
0000101C                            45  CONVERT_TO_ASCII:
0000101C                            46  
0000101C  0C01 0000                 47          CMPI.B      #$0, D1     ; check if we have traversed the whole length
00001020  6700 004C                 48          BEQ         OP_CODE
00001024                            49      
00001024  1419                      50          MOVE.B      (A1)+, D2   ; Gives D2 the next Byte from A1
00001026                            51      
00001026  163C 0039                 52          MOVE.B      #$39, D3    ; Moves 39 into D3, Ascii Characters after 39 are not letters
0000102A  B403                      53          CMP.B       D3, D2
0000102C                            54  
0000102C  6F00 0006                 55          BLE         NUM_ASCII   ; data in D2 is less than 39, Most likely a number
00001030  6000 0018                 56          BRA         LET_ASCII   ; If not a number, then it is an ASCII Letter
00001034                            57  
00001034                            58  
00001034                            59  NUM_ASCII:
00001034  5301                      60          SUBI.B      #$1, D1
00001036                            61          
00001036  163C 0030                 62          MOVE.B      #$30, D3
0000103A  9403                      63          SUB.B       D3, D2      ; ASCII numbers start at 30. 30 = 0, 31 = 1, etc
0000103C  D802                      64          ADD.B       D2, D4      ; new ASCII number stored at D4
0000103E                            65          
0000103E  0C01 0000                 66          CMPI.B      #$0, D1     ; check if we have traversed the whole length
00001042  6700 002A                 67          BEQ         OP_CODE
00001046                            68          
00001046                            69          
00001046  E984                      70          ASL.L       #4, D4
00001048                            71        
00001048  60D2                      72          BRA         CONVERT_TO_ASCII
0000104A                            73          
0000104A                            74          
0000104A                            75  LET_ASCII:
0000104A  5301                      76          SUBI.B      #$1, D1
0000104C                            77                 
0000104C                            78  
0000104C  163C 0037                 79          MOVE.B      #$37, D3
00001050  9403                      80          SUB.B       D3, D2      ; Hex letters we care about are from A-F, we can use math do achieve this
00001052  D802                      81          ADD.B       D2, D4      ; 41 is used to represent A in Hex. Hexadecimal subtraction: 41 - 37 = A
00001054                            82                                  ; 46 is used to represent F in Hex. 46 - 37 = F
00001054                            83          
00001054  0C01 0000                 84          CMPI.B      #$0, D1     ; check if we have traversed the whole length
00001058  6700 0014                 85          BEQ         OP_CODE
0000105C                            86          
0000105C  E984                      87          ASL.L       #4, D4
0000105E                            88          
0000105E                            89          
0000105E  60BC                      90          BRA         CONVERT_TO_ASCII
00001060                            91  
00001060                            92  
00001060                            93  
00001060                            94          ; List of compare and BRA statements
00001060                            95  
00001060                            96  
00001060                            97  
00001060                            98  
00001060                            99          
00001060                           100  * Put program code here
00001060                           101  
00001060                           102  
00001060                           103  DONE:
00001060                           104  
00001060                           105          
00001060  103C 0009                106          MOVE.B  #9, D0
00001064  4E4F                     107          TRAP    #15
00001066                           108          
00001066                           109          
00001066                           110          
00001066                           111  * Put variables and constants here
00001066                           112          INCLUDE     'Disassembler_EA_Codes.x68'
00001066                           113  
00001066                           114  
00001066                           115  
00001066                           116  EACODE:
00001066= 54 45 53 54 4C 4F ...    117          DC.B    'TESTLOC',0
0000106E                           118  
0000106E                           119  
0000106E                           120  
0000106E                           121  
0000106E                           122  
0000106E                           123  -------------------- end include --------------------
0000106E                           124          INCLUDE     'Disassembler_OP_Codes.x68'
0000106E                           125  
0000106E                           126  OP_CODE:
0000106E  2644                     127          MOVEA.L     D4, A3
00001070  4281                     128          CLR.L       D1
00001072  123C 000C                129          MOVE.B      #12, D1
00001076  E26C                     130          LSR.W       D1, D4
00001078                           131  
00001078                           132          
00001078                           133          
00001078                           134          
00001078                           135          
00001078                           136          
00001078                           137  
00001078                           138          
00001078  B83C 0001                139          CMP.B       #$1, D4
0000107C  6000 0018                140          BRA         OP_CODE_MOVE
00001080                           141          
00001080  B83C 0005                142          CMP.B       #$5, D4
00001084  6000 001E                143          BRA         OP_CODE_ADDQ
00001088                           144          
00001088  43F9 000010EF            145          LEA         ERROR_MSG, A1
0000108E  103C 000E                146          MOVE.B      #14, D0    
00001092  4E4F                     147          TRAP        #15
00001094  60CA                     148          BRA         DONE
00001096                           149  
00001096                           150  
00001096                           151  OP_CODE_MOVE:
00001096  43F9 000010B7            152          LEA         MOVE_MSG, A1
0000109C  103C 000E                153          MOVE.B      #14, D0
000010A0  4E4F                     154          TRAP        #15
000010A2  60BC                     155          BRA         DONE
000010A4                           156  
000010A4                           157          
000010A4                           158  OP_CODE_ADDQ:
000010A4                           159  
000010A4                           160  
000010A4                           161  
000010A4                           162  
000010A4                           163  
000010A4  43F9 000010B2            164          LEA         ADDQ_MSG, A1
000010AA  103C 000E                165          MOVE.B      #14, D0
000010AE  4E4F                     166          TRAP        #15
000010B0  60AE                     167          BRA         DONE
000010B2                           168  
000010B2                           169  
000010B2= 41 44 44 51 00           170  ADDQ_MSG:       DC.B        'ADDQ',0
000010B7= 4D 4F 56 45 00           171  MOVE_MSG:       DC.B        'MOVE',0
000010B7= 4D 4F 56 45 00           172  -------------------- end include --------------------
000010BC                           173  
000010BC                           174  
000010BC                           175  
000010BC                           176  
000010BC                           177  START_MSG:
000010BC= 45 6E 74 65 72 20 ...    178                  DC.B        'Enter a starting address:',0
000010D6                           179  END_MSG:
000010D6= 45 6E 74 65 72 20 ...    180                  DC.B        'Enter an ending address:',0
000010EF                           181                  
000010EF                           182  ERROR_MSG:
000010EF= 45 72 72 6F 72 00        183                  DC.B        'Error',0
000010F5                           184                  
000010F5= 53 75 63 63 65 73 ...    185  SUCCESS_MSG:    DC.B        'Success',0
000010FD                           186  
000010FD                           187    
000010FD                           188                  
000010FD                           189                  
000010FD                           190  STA_ADDR        DS.B        40
00001125                           191  END_ADDR        DS.B        40
0000114D                           192                  
0000114D                           193                  
0000114D                           194          END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_MSG            10B2
CONVERT_TO_ASCII    101C
DONE                1060
EACODE              1066
END_ADDR            1125
END_MSG             10D6
ERROR_MSG           10EF
LET_ASCII           104A
MOVE_MSG            10B7
NUM_ASCII           1034
OP_CODE             106E
OP_CODE_ADDQ        10A4
OP_CODE_MOVE        1096
START               1000
START_MSG           10BC
STA_ADDR            10FD
SUCCESS_MSG         10F5
